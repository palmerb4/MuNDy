      
All of Mundy

The following layout displayes the class/registry structure for Mundy. In this layout, we have a more palatable naming system than using long names such as
SolveLCPTechniqueBBPGDKernelDiffDots or my favorite ResolveConstraintsTechniqueNonSmoothLCPComputeConstraintViolationCollisionKernel.  
        
Because techniques and kernels are accessed via their strings and the registry, the most important thing is that our layout reflect the registry. Users will never need to write 
mundy::methods::resolve_constraints::techniques::non_smooth_lcp::compute_constraint_violation::kernels::Sphere. This will naturally arise in their parameter list when specifying
the kernel for compute_constraint_violation. 

Note, we strategically choose to not put classes like ComputeAABB in the compute_aabb namespace. At first glance this is nonuntuitive, but it is imprtitive to our code's flexibilty. 
Take, for example, time_integration::techniques::NodeEuler. This class does not currently have any techniques or required kernels, so there is no need to place it within a
time_integration::techniques::node_euler namespace. But, down the line, we may ellect to add techniques to NodeEuler, thereby necessitating the creation of a node_euler namespace. 
Hence, this design avoids needless nacespacing while still allowing extensibility. 

mundy::
  meta::
    FieldRequirements
    FieldRequirementsBase
    FieldRequirementsFactory
    FieldRequirementsRegistry
    MeshBuilder
    MetaKernel
    MetaKernelFactory
    MetaKernelRegistry
    MetaMethod
    MetaMethodFactory
    MetaMethodRegistry
    PartRequirements      
  methods:: 
    ComputeAABB
    compute_aabb::
      kernels::
        Sphere
        Spherocylinder
        SuperEllipsoid
        Polytope
        Collision
        Spring
        TorsiionalSpring
        Joint
        Hinge
    ComputeOBB
    compute_obb::
      kernels::
        Sphere
        Spherocylinder
        SuperEllipsoid
        Polytope
        Collision
        Spring
        TorsiionalSpring
        Joint
        Hinge
    ComputeBoundingRadius
    compute_bounding_radius::
      kernels::
        Sphere
        Spherocylinder
        SuperEllipsoid
        Polytope
        Collision
        Spring
        TorsiionalSpring
        Joint
        Hinge
    SolveLCP
    solve_lcp::
      techniques::
        APGDTechnique
        BBPGDTechnique
        bbpgd::
            ComputeDiffDotsKernel
            ComputeGradientStepKernel
    // neighbor methods
    DetectNeighbors
      kernels::
        SphereSphere
        SphereSpherecylinder
        SphereEllipsoid
        SpherePolytope
        SpherecylinderSpherecylinder
        SpherecylinderEllipsoid
        SpherecylinderPolytope
        SuperEllipsoidSuperEllipsoid
        SuperEllipsoidPolytope
        PolytopePolytope
    detect_neighbors::
      techniques::
        AABB
        BoundingSphere
    GhostNeighbors
    RefineNeighbors
    refine_neighbors::
      techniques::
        OBB
    // constraint methods  
    GenerateCollisionConstraints
    generate_collision_constraints::
      kernels::
        Spherocylinder
        SuperEllipsoid
        Polytope
    ResolveConstraints
    resolve_constraints::
      techniques::
        SmoothPotential          
        SmoothPenalty
        NonSmoothLCP
        non_smooth_lcp::
          ComputeConstraintViolation
          compute_constraint_violation::  
            kernels::
              Collision
              Spring
              TorsiionalSpring
              Joint
              Hinge
          ComputeConstraintForcing (D F)
          compute_constraint_forcing::
            kernels::
              Spring
              TorsiionalSpring
              Joint
              Hinge
          ComputeConstraintProjection
          compute_constraint_projection::
            techniques::
              DaiFletcher2005
              dai_fletcher::
                kernels::
                  Collision
                  Spring
                  TorsiionalSpring
                  Joint
                  Hinge
          ComputeConstraintViolationLinearizedRateOfChange (dt D^T U)
          compute_constraint_violation_linearized_rate_of_change::
              kernels::
                Collision
                Spring
                TorsiionalSpring
                Joint
                Hinge
          ComputeConstraintJacobian (dt D^T M D)
          ComputeConstraintResidual
        NonSmoothReLCP
    // motion methods
    TimeIntegration
    time_integration::
      techniques::
        NodeEuler
        NodeAdamsBatchford          
    ComputeMobility
    compute_mobility::
      techniques::
        NodeEuler
