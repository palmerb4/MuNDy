A note on naming: 
Formally, Mundy is capitalized as MuNDy, in accordance with its fully expanded version Multi-body Nonlocal Dynamics. 
This capitalization is, however, a pain when coding. As  result, we will refer to MuNDy as Mundy, mundy, or MUNDY depending 
on the context but NEVER MuNDy.

As Mundy grows, we need a higher level of abstraction and organization to better support our end goals. Toward this end, 
we are restructuring Mundy into the following namespaces, classes, and methods. This is a work in progress and will be
updated as we go. Where applicable, we show the parent class that our methods inherit from.

mundy
  StringLiteral
  throw_assert

mundy::balance
  (Various load balancing settings and maybe an stk::balance wrapper if we need it. I would like to use kway_part_geom 
   but it is not currently supported.)

mundy::search
  DetectNeighbors
  GhostNeighbors
  RefineNeighbors

mundy::io
  (Various methods for writing out agents that are not supported by stk::io. For example, a NURBS surface.)

mundy::shapes
  type:: (all derived from Shape)
    PointParticle
    ThinLine2
    ThinLine3
    Quad4/8/12/16
    Hex8/20/27
    Tet4/10/20
    Circle
    Ellipse
    Sphere
    Spherocylinder
    Ellipsoid
    SuperEllipsoid
    Polytope
  Shape
  ShapeFactory
  ShapeRegistry
  ComputeAABB : MetaKernelDispatcher
    kernels: (all derived from MetaKernel)
      ...
  ComputeOBB : MetaKernelDispatcher
    kernels: (all derived from MetaKernel)
      ...
  ComputeBoundingRadius : MetaKernelDispatcher
    kernels: (all derived from MetaKernel)
      ...

mundy::constraint
  type:: (all derived from Constraint)
    Collision
    Spring_2
    Spring_3
    AngularSpring
    Joint
    Hinge
  Constraint
  ConstraintFactory
  ConstraintRegistry
  GenerateAndAttachCollisionConstraints (depends on mundy::shapes)
  UpdateConstraints : MetaKernelDispatcher
    kernels: (all derived from MetaKernel)
      Collision
      Spring
      AngularSpring
      Joint
      Hinge
  ComputeConstraintViolation : MetaKernelDispatcher
     kernels: (all derived from MetaKernel)
       ...
  ComputeConstraintForcing : MetaKernelDispatcher
       kernels: (all derived from MetaKernel)
       ...
  ComputeConstraintProjection : MetaKernelDispatcher
       kernels: (all derived from MetaKernel)
       ...

mundy::pairwise (depends on mundy::shapes)
  EvaluatePairwiseInteractions
  LenardJonesPotential : MetaKernelDispatcher
    kernels: (all derived from MetaTwoWayKernel)
      SphereSphere
      SphereEllipsoid
      EllipsoidEllipsoid
      ...
  WeakChandlerAndersenPotential : MetaKernelDispatcher
    kernels: (all derived from MetaTwoWayKernel)
      ...
  HookianPotential : MetaKernelDispatcher
    kernels: (all derived from MetaTwoWayKernel)
      ...
  HertzianPenalty : MetaKernelDispatcher
    kernels: (all derived from MetaTwoWayKernel)
      ...

mundy::motion (depends on mundy::shapes and mundy::constraint)
  utils::
    Quaternion
  TimeIntegration : MetaMethodDispatcher
    Unconstrained : MetaMethodDispatcher
      NodeEuler
      NodeAdamsBashforth
    Constrained : MetaMethodDispatcher
      LCP
      ReLCP

mundy::init
  Configurator

mundy::mesh
  MeshBuilder
  MetaData
  BulkData
  NeighborList

mundy::meta
  FieldReqsBase
  FieldReqs : FieldReqsBase
  PartReqs
  NeighborListRequirements
  MeshReqs
  HasRequirementsAndIsRegisterable
  MetaFactory
  MetaRegistry
  MetaMethodSubsetExecutionInterface
  MetaMethodDispatcher
  MetaKernel
  MetaKWayKernel
  MetaKernelDispatcher
  MetaKWayKernelDispatcher

This change breaks mundy::methods into more manageable pieces and introduces a more granular view of Mundy. 


Methodology: TLDR We're using a data-centric command design patter to achieve a form of deconstructed object oriented programming. We have "inheritance" and "multiple dispatch" but no objects.
  - Mundy is designed to act on systems of particles interconnected by springs, hinges, or joints and interacting though pairwise potentials, long-ranged interactions, and/or particle-particle collisions. 
  - The system is defined by a mesh of nodes, edges, and faces that connect to form various shapes (e.g., spheres, ellipsoids, cylinders, polytopes, etc.) and constraints (e.g., springs, hinges, joints, etc.).
  - The defining feature that distinguishes one shape from another is its topology (the static connectivity of its nodes, edges, and faces) and the fields necessary to describe its geometry (e.g., position, 
    orientation, radius, etc.). Constraints, on the other hand, are defined by their topology and the fields necessary to describe their behavior (e.g., spring constant, damping coefficient, etc.).
  - Constraints can be thought of as being ethereal in that they do not have a physical presence in the mesh. They are simply a set of rules that govern the behavior of the mesh. For example, spring takes in 
    a spring constraint and the positions of its two nodes and returns a force that is applied to each node. In this regard, it is simply a rule that governs the behavior of the mesh. As such, it is free to pass
    through shapes and other constraints without interacting with them.
  - Just like stk::topology, each shape and constraint is associated with a unique part. This allows us to define methods that are specialized for a certain constraint/shape and (because of stk's part-inheritance 
    design) have them automatically apply to all shapes/constraints that are subsets of that part. For example, we can define a method that computes the bounding radius of a sphere and have it automatically apply to
    any user-defined part that inherits from our SPHERE part.
  - If a user wishes to combine multiple shapes/constraints into a single part, they can do so by inheriting from multiple parts. For example, a user can define a part that is a subset of both CYLINDER and SPRING to 
    create a spring with a cylindrical shape. This part will automatically be compatible with all methods defined for CYLINDER and SPRING.
  - The mesh itself, as in the set of parts, subparts, and fields, is constructed at runtime based on the set of enabled methods. This is the key to Mundy's flexibility and is achieved by having every method within 
    Mundy encode its requirements for the structure of the mesh. For example, the ComputeAABB method for a Sphere requires that the mesh have a part named SPHERE with a position, radius, and aabb field. With this 
    design, you only pay for what you use; if ComputeAABB isn't enabled then there is likely no reason to store aabb on the sphere, but the second you enable ComputeAABB, the aabb field is automatically added to the
    sphere part during mesh construction. In this regard, Mundy used a method-centric functional programming design.
  - When we refer to a "method" we typically mean a MetaMethodSubsetExecutionInterface or a MetaKernel with a district static interface that encodes that method or kernel's requirements. A MetaMethodSubsetExecutionInterface acts on a subset of the mesh, whereas a 
    MetaKernel acts on a fixed number of entities in the mesh. For example, ComputeAABB is a MetaMethodSubsetExecutionInterface that can act on a group of spheres or ellipsoids, whereas ComputeAABB::kernels::Sphere is a MetaKernel that acts 
    on a single sphere within the SPHERE part. We make this distinction to allow for efficient GPU operations where we can launch a single kernel to act on a group of entities and have different teams act on 
    contiguous subsets of those entities. 
  - Unlike object oriented programming, we avoid performance losses caused by dynamic dispatch or non-coherent memory access as much as possible. Instead, to perform operations like ComputeAABB, which differ from 
    shape to shape, we assign each shape a unique part and a ComputeAABB kernel designed for acting on elements of that part. When ComputeAABB is called on a subset of the mesh, we intersect that subset with the 
    part for each shape and call the corresponding kernel on that intersection (see ComputeAABB::kernels::Sphere and KernelDispatcher for an example). This allows us to avoid dynamic dispatch by directly handling 
    the dispatch of kernels outside of the performance critical kernel evaluation loop. Furthermore, when launching the kernel we assign teams (either CPU threads or GPU teams) to evaluate the kernel on contiguous
    blocks of entities within the intersection. This is ideal for SIMD optimized operations on the CPU and GPU.
  - To achieve flexibility and extensibility with respect to the creation of MetaMethods and MetaKernels, Mundy uses a hierarchical static factory design where each level of the hierarchy represents a set of methods,
    techniques, or computational operations. For example, we may eventually decide that ComputeAABB should offer two techniques: one where users can add a fixed buffer distance to their bounding box and another 
    where the buffer distance is computed based on the velocity of the particles. To achieve this, we would can give ComputeAABB a static factory and register with that factory a MetaMethodSubsetExecutionInterface for each technique. Users 
    can then use a runtime flag to choose which method to use. ComputeAABB won't directly know about the methods, but will instead call the factory to interact with the method that it should use. This allows us 
    to add new methods without modifying the existing code base. If a user wants to add their own technique, they need only register it with ComputeAABB's static factory. Mundy consists of a hierarchy of such factories, 
    each of which is responsible for a set of methods, techniques, or computational operations.
  - Mundy's static factory is compiled in a you-only-get-what-you-use fashion and special care is given to ensuring that registration and construction of Mundy's hierarchy occurs only when necessary.



By design, we are trying to avoid design patterns within which adding a method with new data requirements for an agent doesn't require modifying the agent class itself. 

For example, I was considering a design pattern within which users interfaced with the shapes like structs, i.e. Sphere(element_id, bulik_data_ptr).radius rather than needing to fetch the 
radius field name, fetch the radius field, and then use MetaData to fetch the radius. I like this design because it is clean and simple and looks like array of structures. The problem is that
C++ only allows interfaces to change at compile-time not run-time. Is it possible to use the requirements to build something like this? No, we would need to use templates. 



Notes for the newest wave of changes:
  - STK has a ProfilerBlock concept, notifier concept, and sorter concept. See modification_end, sort_entities
  - modification_end returns if it failed or not. We need to assert success.
  - Sharing of ELEMENT_RANK or higher entities is not supported. 


By breaking up mundy into subpackages such that users can disable different pieces of mundy based on their needs,
we have better exposed the interactions between functional subgroups within mundy and some of the flaws in the current groupings.
We should still have core, math, mesh, meta, agent, shape, constraint, linker but larger collections like init
that attempt to perform initialization for all agent types, don't much much sense. If I don't want constraints, why should I be
forced to include constraints just to initialize my shapes. Each agent type should have its own initialization routines. The same
isn't quite true for motion, which includes custom routines for time integration, particle mobility, and constraint resolution. 
We should move particle mobility to shapes; the rest can stay. 

